/* CSS 布局 - display 属性 */

/* display 属性是用于控制布局的最重要的 CSS 属性。 */

/* display 属性 */
/* display 属性规定是否/如何显示元素。 */

/* 每个 HTML 元素都有一个默认的 display 值，具体取决于它的元素类型。大多数元素的默认 display 值为 block 或 inline。 */


/* 块级元素（block element） */
/* 块级元素总是从新行开始，并占据可用的全部宽度（尽可能向左和向右伸展）。 */
/* 块级元素的一些例子： */
/* <div> */
/* <h1> - <h6> */
/* <p> */
/* <form> */
/* <header> */
/* <footer> */
/* <section> */

/* 行内元素（inline element） */
/* 内联元素不从新行开始，仅占用所需的宽度。 */
/* 行内元素的一些例子： */
/* <span> */
/* <a> */
/* <img> */

/* Display: none; */
/* display: none; 通常与 JavaScript 一起使用，以隐藏和显示元素，而无需删除和重新创建它们。如果您想知道如何实现此目标，请查看本页面上的最后一个实例。 */
/* 默认情况下，<script> 元素使用 display: none;。 */
/* 覆盖默认的 Display 值 */
/* 如前所述，每个元素都有一个默认 display 值。但是，您可以覆盖它。 */
/* 将行内元素更改为块元素，反之亦然，对于使页面以特定方式显示同时仍遵循 Web 标准很有用。 */
/* 一个常见的例子是为实现水平菜单而生成行内的 <li> 元素： */
/* 实例 */
li {
  display: inline;
}

/* 注意：设置元素的 display 属性仅会更改元素的显示方式，而不会更改元素的种类。因此，带有 display: block; 的行内元素不允许在其中包含其他块元素。 */
/* 下例将 <span> 元素显示为块元素： */

/* 实例 */
span {
  display: block;
}

/* 下例将 <a> 元素显示为块元素： */
/* 实例 */
a {
  display: block;
}

/* 隐藏元素 - display:none 还是 visibility:hidden？ */
/* 通过将 display 属性设置为 none 可以隐藏元素。该元素将被隐藏，并且页面将显示为好像该元素不在其中： */
/* 实例 */
h1.hidden {
  display: none;
}

/* visibility:hidden; 也可以隐藏元素。 */
/* 但是，该元素仍将占用与之前相同的空间。元素将被隐藏，但仍会影响布局： */
/* 实例 */
h1.hidden {
  visibility: hidden;
}

/* CSS 布局 - display: inline-block */
/* display: inline-block */
/* 与 display: inline 相比，主要区别在于 display: inline-block 允许在元素上设置宽度和高度。 */
/* 同样，如果设置了 display: inline-block，将保留上下外边距/内边距，而 display: inline 则不会。 */
/* 与 display: block 相比，主要区别在于 display：inline-block 在元素之后不添加换行符，因此该元素可以位于其他元素旁边。 */

/* display 的一种常见用法：inline-block 用于水平而不是垂直地显示列表项。下例创建了一个水平导航链接： */
/* 实例 */
.nav {
  background-color: yellow; 
  list-style-type: none;
  text-align: center; 
  padding: 0;
  margin: 0;
}
.nav li {
  display: inline-block;
  font-size: 20px;
  padding: 20px;
}









/* CSS 布局 - width 和 max-width */
/* 使用 width、max-width 和 margin: auto; */
/* 如上一章所述，块级元素始终占用可用的全部宽度（尽可能向左和向右伸展）。 */
/* 设置块级元素的 width 将防止其延伸到其容器的边缘。然后，您可以将外边距设置为 auto，以将元素在其容器中水平居中。元素将占用指定的宽度，剩余空间将在两个外边距之间平均分配： */
/* 注意：当浏览器窗口小于元素的宽度时，上面这个 <div> 会发生问题。浏览器会将水平滚动条添加到页面。 */
/* 在这种情况下，使用 max-width 可以改善浏览器对小窗口的处理。为了使网站在小型设备上可用，这一点很重要： */
/* 提示：请将浏览器窗口的大小调整为小于 500 像素，以查看两个 div 之间的区别！ */
/* 这是上面两个 div 的例子： */
/* 实例 */
div.ex1 {
  width: 500px;
  margin: auto;
  border: 3px solid #73AD21;
}
div.ex2 {
  max-width: 500px;
  margin: auto;
  border: 3px solid #73AD21;
}








/* CSS 布局 - position 属性 */
/* position 属性规定应用于元素的定位方法的类型（static、relative、fixed、absolute 或 sticky）。 */

/* position 属性 */
/* position 属性规定应用于元素的定位方法的类型。 */

/* 有五个不同的位置值： */
/* static */
/* relative */
/* fixed */
/* absolute */
/* sticky */
/* 元素其实是使用 top、bottom、left 和 right 属性定位的。但是，除非首先设置了 position 属性，否则这些属性将不起作用。根据不同的 position 值，它们的工作方式也不同。 */

/* position: static; */
/* HTML 元素默认情况下的定位方式为 static（静态）。 */
/* 静态定位的元素不受 top、bottom、left 和 right 属性的影响。 */
/* position: static; 的元素不会以任何特殊方式定位；它始终根据页面的正常流进行定位： */
/* 实例 */
div.static {
  position: static;
  border: 3px solid #73AD21;
}

/* position: relative; */
/* position: relative; 的元素相对于其正常位置进行定位。 */
/* 设置相对定位的元素的 top、right、bottom 和 left 属性将导致其偏离其正常位置进行调整。不会对其余内容进行调整来适应元素留下的任何空间。 */
/* 实例 */
div.relative {
  position: relative;
  left: 30px;
  border: 3px solid #73AD21;
}

/* position: fixed; */
/* position: fixed; 的元素是相对于视口定位的，这意味着即使滚动页面，它也始终位于同一位置。 top、right、bottom 和 left 属性用于定位此元素。 */
/* 固定定位的元素不会在页面中通常应放置的位置上留出空隙。 */
/* 请注意页面右下角的这个固定元素。这是所用的 CSS： */
/* 实例 */
div.fixed {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 300px;
  border: 3px solid #73AD21;
}

/* position: absolute; */
/* position: absolute; 的元素相对于最近的定位祖先元素进行定位（而不是相对于视口定位，如 fixed）。 */
/* 然而，如果绝对定位的元素没有祖先，它将使用文档主体（body），并随页面滚动一起移动。 */
/* 注意：“被定位的”元素是其位置除 static 以外的任何元素。 */
/* 实例 */
div.relative {
  position: relative;
  width: 400px;
  height: 200px;
  border: 3px solid #73AD21;
} 
div.absolute {
  position: absolute;
  top: 80px;
  right: 0;
  width: 200px;
  height: 100px;
  border: 3px solid #73AD21;
}

/* position: sticky; */
/* position: sticky; 的元素根据用户的滚动位置进行定位。 */
/* 粘性元素根据滚动位置在相对（relative）和固定（fixed）之间切换。起先它会被相对定位，直到在视口中遇到给定的偏移位置为止 - 然后将其“粘贴”在适当的位置（比如 position:fixed）。 */
/* 在此例中，在到达其滚动位置时，sticky 元素将停留在页面顶部（top: 0）。 */
/* 实例 */
div.sticky {
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
  background-color: green;
  border: 2px solid #4CAF50;
}

/* 重叠元素 */
/* 在对元素进行定位时，它们可以与其他元素重叠。 */
/* z-index 属性指定元素的堆栈顺序（哪个元素应放置在其他元素的前面或后面）。 */
/* 元素可以设置正或负的堆叠顺序： */
/* 实例 */
img {
  position: absolute;
  left: 0px;
  top: 0px;
  z-index: -1;
}
/* 具有较高堆叠顺序的元素始终位于具有较低堆叠顺序的元素之前。 */
/* 注意：如果两个定位的元素重叠而未指定 z-index，则位于 HTML 代码中最后的元素将显示在顶部。 */








/* CSS 布局 - 溢出 */
/* CSS overflow 属性控制对太大而区域无法容纳的内容的处理方式。 */

/* CSS Overflow */
/* overflow 属性指定在元素的内容太大而无法放入指定区域时是剪裁内容还是添加滚动条。 */

/* overflow 属性可设置以下值： */
/* visible - 默认。溢出没有被剪裁。内容在元素框外渲染 */
/* hidden - 溢出被剪裁，其余内容将不可见 */
/* scroll - 溢出被剪裁，同时添加滚动条以查看其余内容 */
/* auto - 与 scroll 类似，但仅在必要时添加滚动条 */
/* 注释：overflow 属性仅适用于具有指定高度的块元素。 */
/* 注释：在 OS X Lion（在 Mac 上）中，滚动条默认情况下是隐藏的，并且仅在使用时显示（即使设置了 "overflow:scroll"）。 */

/* overflow: visible */
/* 默认情况下，溢出是可见的(visible)，这意味着它不会被裁剪，而是在元素框外渲染： */
/* 实例 */
div {
  width: 200px;
  height: 50px;
  background-color: #eee;
  overflow: visible;
}

/* overflow: hidden */
/* 如果使用 hidden 值，溢出会被裁剪，其余内容被隐藏： */
/* 实例 */
div {
  overflow: hidden;
}

/* overflow: scroll */
/* 如果将值设置为 scroll，溢出将被裁剪，并添加滚动条以便在框内滚动。请注意，这将在水平和垂直方向上添加一个滚动条（即使您不需要它）： */
/* 实例 */
div {
  overflow: scroll;
}

/* overflow: auto */
/* auto 值类似于 scroll，但是它仅在必要时添加滚动条： */
/* 实例 */
div {
  overflow: auto;
}

/* overflow-x 和 overflow-y */
/* overflow-x 和 overflow-y 属性规定是仅水平还是垂直地（或同时）更改内容的溢出： */

/* overflow-x 指定如何处理内容的左/右边缘。 */
/* overflow-y 指定如何处理内容的上/下边缘。 */
/* 实例 */
div {
  overflow-x: hidden; /* 隐藏水平滚动栏 */
  overflow-y: scroll; /* 添加垂直滚动栏 */
}









/* CSS 布局 - 浮动和清除 */
/* CSS float 属性规定元素如何浮动。 */
/* CSS clear 属性规定哪些元素可以在清除的元素旁边以及在哪一侧浮动。 */


/* float 属性 */
/* float 属性用于定位和格式化内容，例如让图像向左浮动到容器中的文本那里。 */

/* float 属性可以设置以下值之一： */

/* left - 元素浮动到其容器的左侧 */
/* right - 元素浮动在其容器的右侧 */
/* none - 元素不会浮动（将显示在文本中刚出现的位置）。默认值。 */
/* inherit - 元素继承其父级的 float 值 */
/* 最简单的用法是，float 属性可实现（报纸上）文字包围图片的效果。 */

/* 实例 - float: right; */
/* 下例指定图像应在文本中向右浮动： */
/* 实例 */
img {
  float: right;
}


/* CSS 布局 - clear 和 clearfix */
/* clear 属性 */
/* clear 属性指定哪些元素可以浮动于被清除元素的旁边以及哪一侧。 */
/* clear 属性可设置以下值之一： */
/* none - 允许两侧都有浮动元素。默认值 */
/* left - 左侧不允许浮动元素 */
/* right- 右侧不允许浮动元素 */
/* both - 左侧或右侧均不允许浮动元素 */
/* inherit - 元素继承其父级的 clear 值 */
/* 使用 clear 属性的最常见用法是在元素上使用了 float 属性之后。 */
/* 在清除浮动时，应该对清除与浮动进行匹配：如果某个元素浮动到左侧，则应清除左侧。您的浮动元素会继续浮动，但是被清除的元素将显示在其下方。 */
/* 下例将清除向左的浮动。表示在（div 的）左侧不允许出现浮动元素： */

/* 实例 */
div {
  clear: left;
}
/* clearfix Hack */
/* 如果一个元素比包含它的元素高，并且它是浮动的，它将“溢出”到其容器之外： */
/* 然后我们可以向包含元素添加 overflow: auto;，来解决此问题： */
/* 实例 */
.clearfix {
  overflow: auto;
}
/* 只要您能够控制外边距和内边距（否则您可能会看到滚动条），overflow: auto clearfix 就会很好地工作。但是，新的现代 clearfix hack 技术使用起来更安全，以下代码被应用于多数网站： */
/* 实例 */
.clearfix::after {
  content: "";
  clear: both;
  display: table;
}


/* CSS 布局 - 浮动实例 */
/* 网格 / 等宽的框 */
/* 通过使用 float 属性，可以轻松地并排浮动内容框： */
/* 实例 */
* {
  box-sizing: border-box;
}

.box {
  float: left;
  width: 33.33%; /* 三个框（四框使用 25%，两框使用 50%，以此类推） */
  padding: 50px; /* 如果需要在图片间增加间距 */
}

/* 什么是 box-sizing？ */
/* 您可以轻松地并排创建三个浮动框。但是，当您添加一些内容来扩大每个框的宽度（例如，内边距或边框）时，这个框会损坏。 box-sizing 属性允许我们在框的总宽度（和高度）中包括内边距和边框，确保内边距留在框内而不会破裂。 */

/* CSS Box Sizing */
/* CSS box-sizing 属性允许我们在元素的总宽度和高度中包括内边距（填充）和边框。 */

/* 假如不指定 CSS box-sizing 属性 */
/* 默认情况下，元素的宽度和高度是这样计算的： */
/* width + padding + border = 元素的实际宽度 */
/* height + padding + border = 元素的实际高度 */
/* 这意味着：当您设置元素的宽度/高度时，该元素通常看起来比您设置的更大（因为元素的边框和内边距已被添加到元素的指定宽度/高度中）。 */

/* 如果使用 CSS box-sizing 属性 */
/* box-sizing 属性允许我们在元素的总宽度和高度中包括内边距和边框。 */

/* 如果在元素上设置了 box-sizing: border-box;，则宽度和高度会包括内边距和边框： */
/* 实例 */
.div1 {
  width: 300px;
  height: 100px;
  border: 1px solid blue;
  box-sizing: border-box;
}
.div2 {
  width: 300px;
  height: 100px;
  padding: 50px;
  border: 1px solid red;
  box-sizing: border-box;
}
/* 由于使用 box-sizing: border-box; 的效果如此之好，许多开发人员希望页面上的所有元素都能够以这种方式工作。 */
/* 下面的代码能够确保以这种更直观的方式调整所有元素的大小。许多浏览器已经在对许多表单元素使用 box-sizing: border-box;（但并非全部 - 这就是为什么 input 和 textarea 在 width: 100%; 时看起来不同）。 */
/* 将其应用于所有元素是安全且明智的： */
/* 实例 */
* {
  box-sizing: border-box;
}








/* CSS 布局 - 水平和垂直对齐 */
/* 居中对齐元素 */
/* 要使块元素（例如 <div> ）水平居中，请使用 margin: auto;。 */

/* 设置元素的宽度将防止其延伸到容器的边缘。 */

/* 然后，元素将占用指定的宽度，剩余空间将在两个外边距之间平均分配： */
/* 实例 */
.center {
  margin: auto;
  width: 50%;
  border: 3px solid green;
  padding: 20px;
}
/* 注意：如果未设置 width 属性（或将其设置为 100％），则居中对齐无效。 */

/* 居中对齐文本 */
/* 如果仅需在元素内居中文本，请使用 text-align: center;： */
/* 实例 */
.center {
  text-align: center;
  border: 3px solid green;
}

/* 居中对齐图像 */
/* 如需居中图像，请将左右外边距设置为 auto，并将其设置为块元素： */
/* 实例 */
img {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 40%;
}

/* 左和右对齐 - 使用 position */
/* 对齐元素的一种方法是使用 position: absolute; : */
/* 实例 */
.right {
  position: absolute;
  right: 0px;
  width: 300px;
  border: 3px solid #73AD21;
  padding: 20px;
}
/* 注意：绝对定位的元素将从正常流中删除，并可能出现元素重叠。 */

/* 左和右对齐 - 使用 float */
/* 对齐元素的另一种方法是使用 float 属性： */
/* 实例 */
.right {
  float: right;
  width: 300px;
  border: 3px solid #73AD21;
  padding: 10px;
}
/* 注意：如果一个元素比包含它的元素高，并且它是浮动的，它将溢出其容器。您可以使用 clearfix hack 来解决此问题（请看下面的例子）。 */
/* clearfix Hack */
/* 然后我们可以向包含元素添加 overflow: auto;，来解决此问题： */
/* 实例 */
.clearfix {
  overflow: auto;
}

/* 垂直对齐 - 使用 padding */
/* 有很多方法可以在 CSS 中垂直对齐元素。一个简单的解决方案是使用上下内边距： */
/* 实例 */
.center {
  padding: 70px 0;
  border: 3px solid green;
}

/* 如需同时垂直和水平对齐，请使用 padding 和 text-align: center;： */
/* 实例 */
.center {
  padding: 70px 0;
  border: 3px solid green;
  text-align: center;
}

/* 垂直对齐 - 使用 line-height/ */
/* 另一个技巧是使用其值等于 height 属性值的 line-height 属性： */
/* 实例 */
.center {
  line-height: 200px;
  height: 200px;
  border: 3px solid green;
  text-align: center;
}

/* 如果有多行文本，请添加如下代码：*/
.center p {
  line-height: 1.5;
  display: inline-block;
  vertical-align: middle;
}

/* 垂直对齐 - 使用 position 和 transform */
/* 如果您的选择不是 padding 和 line-height，则另一种解决方案是使用 position 和 transform 属性： */
/* 实例 */
.center { 
  height: 200px;
  position: relative;
  border: 3px solid green; 
}

.center p {
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* 垂直对齐 - 使用 Flexbox */
/* 您还可以使用 flexbox 将内容居中。请注意，IE10 以及更早的版本不支持 flexbox： */
/* 实例 */
.center {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  border: 3px solid green; 
}






















































































