https://github.com/exceljs/exceljs
https://github.com/exceljs/exceljs/blob/master/README_zh.md

npm install exceljs



import fs from 'fs'
const ExcelJS = require('exceljs');

    async test6() {
     const workbook = new ExcelJS.Workbook();
      workbook.creator = 'Me';
      workbook.lastModifiedBy = 'Her';
      workbook.created = new Date(1985, 8, 30);
      workbook.modified = new Date();
      workbook.lastPrinted = new Date(2016, 9, 27);
      const worksheet = workbook.addWorksheet('My Sheet');

      worksheet.columns = [
        { header: 'Id', key: 'id', width: 10 },
        { header: 'Name', key: 'name', width: 32 },
        { header: 'D.O.B.', key: 'DOB', width: 10 }
      ];

      const data = Array.from({ length: 50 }, (v, i) => ['A' + (i + 2).toString(), 'B' + (i + 2).toString() + 'B' + (i + 2).toString() + 'B' + (i + 2).toString(), 'C' + (i + 2).toString()])
      worksheet.addRows(data);
      worksheet.getCell('B2').border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
      // 在A3周围设置双细绿色边框
      worksheet.getCell('B4').border = {
        top: { style: 'double', color: { argb: 'FF00FF00' } },
        left: { style: 'double', color: { argb: 'FF00FF00' } },
        bottom: { style: 'double', color: { argb: 'FF00FF00' } },
        right: { style: 'double', color: { argb: 'FF00FF00' } }
      };

      // 在A5中设置厚红十字边框
      worksheet.getCell('B6').border = {
        diagonal: { up: true, down: true, style: 'thick', color: { argb: 'FFFF0000' } }
      };

      // 用红色深色垂直条纹填充A1
      worksheet.getCell('B8').fill = {
        type: 'pattern',
        pattern: 'darkVertical',
        fgColor: { argb: 'FFFF0000' }
      };

      worksheet.getCell('B9').fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFFF0000' }
      };

      // 在A2中填充深黄色格子和蓝色背景
      worksheet.getCell('B10').fill = {
        type: 'pattern',
        pattern: 'darkTrellis',
        fgColor: { argb: 'FFFFFF00' },
        bgColor: { argb: 'FF0000FF' }
      };

      // 从左到右用蓝白蓝渐变填充A3
      worksheet.getCell('B12').fill = {
        type: 'gradient',
        gradient: 'angle',
        degree: 0,
        stops: [
          { position: 0, color: { argb: 'FF0000FF' } },
          { position: 0.5, color: { argb: 'FFFFFFFF' } },
          { position: 1, color: { argb: 'FF0000FF' } }
        ]
      };


      // 从中心开始用红绿色渐变填充A4
      worksheet.getCell('B14').fill = {
        type: 'gradient',
        gradient: 'path',
        center: { left: 0.5, top: 0.5 },
        stops: [
          { position: 0, color: { argb: 'FFFF0000' } },
          { position: 1, color: { argb: 'FF00FF00' } }
        ]
      };

      // 将单元格对齐方式设置为左上，中间居中，右下
      worksheet.getCell('A16').alignment = { vertical: 'top', horizontal: 'left' };
      worksheet.getCell('B16').alignment = { vertical: 'middle', horizontal: 'center' };
      worksheet.getCell('C16').alignment = { vertical: 'bottom', horizontal: 'right' };

      // 将单元格设置为自动换行
      worksheet.getCell('B18').value = '自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行';
      worksheet.getCell('B18').alignment = { wrapText: true };

      // 将单元格缩进设置为3
      worksheet.getCell('B20').alignment = { indent: 3 };

      // 将单元格文本旋转设置为向上30deg，向下45deg和垂直文本
      worksheet.getCell('A22').alignment = { textRotation: 30 };
      worksheet.getCell('B22').alignment = { textRotation: -45 };
      worksheet.getCell('C22').alignment = { textRotation: 'vertical' };

      // 纯文字笔记
      worksheet.getCell('B24').note = 'Hello, ExcelJS!';

      // 处理单个单元格⬆
      const cell = worksheet.getCell('B26');

      // 修改/添加单个单元格
      cell.value = new Date(1968, 5, 1);

      // 查询单元格的类型
      // expect(cell.type).toEqual(Excel.ValueType.Date);

      // // 使用单元格的字符串值
      // myInput.value = cell.text;

      // // 使用 html 安全的字符串进行渲染...
      // const html = '<div>' + cell.html + '</div>';


      // 合并单元格⬆
      // 合并一系列单元格
      worksheet.mergeCells('B28:C29');


      // 按左上，右下合并
      worksheet.mergeCells('B30', 'C31');

      // 按开始行，开始列，结束行，结束列合并（相当于 K10:M12）
      worksheet.mergeCells(32, 2, 33, 3);




      // 字体
      // for the wannabe graphic designers out there
      worksheet.getCell('B32').font = {
        name: 'Comic Sans MS',
        family: 4,
        size: 16,
        underline: true,
        bold: true
      };

      // for the graduate graphic designers...
      worksheet.getCell('B34').font = {
        name: 'Arial Black',
        color: { argb: 'FF00FF00' },
        family: 2,
        size: 14,
        italic: true
      };

      // 垂直对齐
      worksheet.getCell('B36').font = {
        vertAlign: 'superscript'
      };

      // 注意：该单元格将存储对分配的字体对象的引用。
      // 如果之后更改了字体对象，则单元字体也将更改。
      const font = { name: 'Arial', size: 12 };
      worksheet.getCell('B38').font = font;
      font.size = 20; // 单元格 A3 现在具有20号字体！

      // 从文件或流中读取工作簿后，共享相似字体的单元格可能引用相同的字体对象

      // 字体属性	描述	示例值
      // name	字体名称。	'Arial', 'Calibri', etc.
      // family	备用字体家族。整数值。	1 - Serif, 2 - Sans Serif, 3 - Mono, Others - unknown
      // scheme	字体方案。	'minor', 'major', 'none'
      // charset	字体字符集。整数值。	1, 2, etc.
      // size	字体大小。整数值。	9, 10, 12, 16, etc.
      // color	颜色描述，一个包含 ARGB 值的对象。	{ argb: 'FFFF0000'}
      // bold	字体 粗细	true, false
      // italic	字体 倾斜	true, false
      // underline	字体 下划线 样式	true, false, 'none', 'single', 'double', 'singleAccounting', 'doubleAccounting'
      // strike	字体 删除线	true, false
      // outline	字体轮廓	true, false
      // vertAlign	垂直对齐	'superscript', 'subscript'





      workbook.xlsx.writeBuffer()
        .then(buffer => {
          fs.writeFile('filename.xlsx', buffer, (err) => {
            if (err) throw err;
            console.log('The file has been saved!');
          })
        })
        .catch(err => console.log('Error writing excel export', err))
    },










